# README for In-Memory Database

This project implements an in-memory key-value database with transaction support in C++. The database supports essential operations for transactional data management, including starting a transaction, inserting or updating key-value pairs during a transaction, retrieving the value associated with a key, committing the changes made during a transaction to the main database, and discarding the changes with a rollback. To use this project, save the code in a file named `dataprocessing.cpp` and compile it using a C++17-supported compiler like GCC or Clang with the command `g++ -std=c++17 -o dataprocessing dataprocessing.cpp`. Once compiled, the code can be executed using the command `./dataprocessing` to run the program. The provided code includes a `main()` function that demonstrates how each functionality can be tested, such as initiating a transaction, inserting key-value pairs, and verifying the results of commits and rollbacks. This allows users to observe the expected behavior directly through the output. Future iterations of this assignment could benefit from additional clarity in instructions, such as explicitly stating the behavior of undefined keys and how null values should be represented. Additional features like nested transactions or batch operations could enhance the assignment's applicability to real-world scenarios. Providing predefined test cases and expected outputs could also simplify grading and validation. This implementation adheres to the outlined requirements while offering room for future improvements to enhance clarity and functionality.
